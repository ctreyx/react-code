(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.index = global.index || {}, global.index.js = factory()));
})(this, (function () { 'use strict';

	/*
	 * @Author: fumi 330696896@qq.com
	 * @Date: 2024-08-07 11:40:42
	 * @LastEditors: fumi 330696896@qq.com
	 * @LastEditTime: 2024-08-07 11:44:27
	 * @FilePath: \react\packages\react-reconciler\src\workTags.ts
	 * @Description: 这是默认设置,请设置`customMade`, 打开koroFileHeader查看配置 进行设置: https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE
	 */
	// 描述fubernode是什么类型的节点
	const FunctionComponent = 0;
	const HostRoot = 3;
	const HostComponent = 5;
	const HostText = 6;

	/*
	 * @Author: fumi 330696896@qq.com
	 * @Date: 2024-08-07 14:27:25
	 * @LastEditors: fumi 330696896@qq.com
	 * @LastEditTime: 2024-08-15 18:16:04
	 * @FilePath: \react\packages\react-reconciler\src\fiberFlags.ts
	 * @Description: 这是默认设置,请设置`customMade`, 打开koroFileHeader查看配置 进行设置: https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE
	 */
	const NoFlags = /*                      */ 0b0000000;
	const Placement = /*                    */ 0b0000001;
	const Update = /*                       */ 0b0000010;
	const ChildDeletion = /*                */ 0b0000100;
	const MutationMask = Placement | Update | ChildDeletion;

	class FiberNode {
	    tag;
	    key;
	    stateNode;
	    type;
	    ref;
	    pendingProps;
	    memoizedProps;
	    memoizedState;
	    alternate;
	    flags;
	    subtreeFlags; //存储子树flags
	    updateQueue;
	    return;
	    sibling;
	    child;
	    index;
	    constructor(tag, pendingProps, key) {
	        this.tag = tag; //实例
	        this.key = key;
	        this.stateNode = null; // 实例化后的实例对象,<div></div>
	        this.type = null; // 组件类型,如Function
	        // 构成树状结构
	        this.return = null; //指向父fiber, 为什么是return而不是parent，因为工作单元下一个就是父级
	        this.sibling = null; //指向兄弟fiber
	        this.child = null;
	        this.index = 0;
	        this.ref = null;
	        // 作为工作单元
	        this.pendingProps = pendingProps; //当前状态
	        this.memoizedProps = null; //完成后的确定状态
	        this.memoizedState = null;
	        this.alternate = null; //双缓存
	        this.updateQueue = null;
	        //副作用
	        this.flags = NoFlags;
	        this.subtreeFlags = NoFlags;
	    }
	}
	class FiberRootNode {
	    container;
	    current;
	    finishedWork;
	    constructor(container, hostRootFiber) {
	        this.container = container;
	        this.current = hostRootFiber;
	        hostRootFiber.stateNode = this;
	        this.finishedWork = null;
	    }
	}
	const createWorkInProgress = (current, pendingProps) => {
	    // 双缓存机制，获取alternate
	    let wip = current.alternate;
	    if (wip === null) {
	        // 首屏
	        wip = new FiberNode(current.tag, pendingProps, current.key);
	        // wip.type = current.type;
	        wip.stateNode = current.stateNode;
	        wip.alternate = current;
	        current.alternate = wip;
	    }
	    else {
	        // 更新阶段
	        wip.pendingProps = pendingProps;
	        wip.flags = NoFlags; // 清空副作用
	        wip.subtreeFlags = NoFlags;
	    }
	    wip.type = current.type; // 组件类型,如Function
	    wip.updateQueue = current.updateQueue;
	    wip.child = current.child;
	    wip.memoizedProps = current.memoizedProps;
	    wip.memoizedState = current.memoizedState;
	    return wip;
	};
	function createFiberFromElement(element) {
	    const { type, key, props } = element;
	    // 根据不同type返回不同fiber
	    let fiberTag = FunctionComponent;
	    if (typeof type === 'string') {
	        // <div></div>
	        fiberTag = HostComponent;
	    }
	    else if (typeof type !== 'function' && true) {
	        console.log('未定义的类型', element);
	    }
	    const fiber = new FiberNode(fiberTag, props, key);
	    fiber.type = type;
	    return fiber;
	}

	const createUpdate = (action) => {
	    return {
	        action
	    };
	};
	const createUpdateQueue = () => {
	    return {
	        shared: {
	            pending: null
	        }
	    };
	};
	//往链表插入
	const enqueueUpdate = (updateQueue, update) => {
	    updateQueue.shared.pending = update;
	};
	// 消费链表
	const processUpdateQueue = (baseState, pendingUpdate) => {
	    const result = {
	        memoizedState: baseState
	    };
	    if (pendingUpdate != null) {
	        // 两种，第一种 base 1 update 2 -> 返回最新值2
	        // 第二种函数 base 1 update (x)=>4x ->返回最新值4
	        const action = pendingUpdate.action;
	        if (action instanceof Function) {
	            // 函数,接受老值返回新
	            result.memoizedState = action(baseState);
	        }
	        else {
	            // 就是直接值，直接赋值
	            result.memoizedState = action;
	        }
	    }
	    return result;
	};

	//判断是否支持Symbol
	const supportSysbol = typeof Symbol === 'function' && Symbol.for;
	const REACT_ELEMENT_TYPE = supportSysbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	/**
	 * ChildReconciler 是为 父fiber 返回一个 子fiber
	 * @param showldTrackEffects 是否追踪副作用 ,
	 * 只有在mount的时候存在大量插入操作不追踪，
	 * 更新的时候不会需要追踪
	 * @returns
	 */
	function ChildReconciler(showldTrackEffects) {
	    // 处理单元素，创造一个fiber
	    function reconcileSingleElement(returnFiber, currentFiber, element) {
	        const fiber = createFiberFromElement(element);
	        fiber.return = returnFiber; //父节点
	        return fiber;
	    }
	    // 文本节点直接传入content
	    function reconcileSingleTextNode(returnFiber, currentFiber, content) {
	        const fiber = new FiberNode(HostText, { content }, null);
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    // 插入节点
	    function placeSingleChild(fiber) {
	        // 需要追踪副作用并且没有缓存，代表首屏渲染，则需要标记Placement
	        if (showldTrackEffects) {
	            fiber.flags |= Placement;
	        }
	        return fiber;
	    }
	    return function reconcileChildrenFibers(returnFiber, currentFiber, newChild) {
	        if (typeof newChild === 'object' && newChild !== null) {
	            switch (newChild.$$typeof) {
	                case REACT_ELEMENT_TYPE:
	                    const fiber = reconcileSingleElement(returnFiber, currentFiber, newChild);
	                    return placeSingleChild(fiber);
	                default:
	                    {
	                        console.error(`Unknown node type --- ChildReconciler`);
	                    }
	                    break;
	            }
	        }
	        // 文本节点
	        if (typeof newChild === 'string' || typeof newChild === 'number') {
	            const fiber = reconcileSingleTextNode(returnFiber, currentFiber, newChild);
	            return placeSingleChild(fiber);
	        }
	        {
	            console.error(`Unknown node type --- ChildReconciler`);
	        }
	        return null;
	    };
	}
	const reconcileChilFiber = ChildReconciler(true);
	const mountChildFibers = ChildReconciler(false);

	/**
	 * 递归中，递阶段 ， 不断返回子节点
	 */
	const beginWork = (fiberNode) => {
	    // 比较，返回子fiber
	    switch (fiberNode.tag) {
	        case HostRoot:
	            return updateHostRoot(fiberNode);
	        case HostComponent:
	            return updateHostComponent(fiberNode);
	        case HostText: //<div>xx</div>   div下面没有子节点
	            return null;
	        default:
	            {
	                console.error(`Unknown node type: ${fiberNode.tag}`);
	            }
	            break;
	    }
	    return fiberNode;
	};
	function updateHostRoot(wip) {
	    const baseState = wip.memoizedState;
	    const updateQueue = wip.updateQueue;
	    const pengding = updateQueue.shared.pending;
	    updateQueue.shared.pending = null;
	    // 最新状态
	    const { memoizedState } = processUpdateQueue(baseState, pengding);
	    wip.memoizedState = memoizedState;
	    const nextChildren = wip.memoizedState;
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	function updateHostComponent(wip) {
	    const nextProps = wip.pendingProps;
	    const nextChildren = nextProps.children;
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	function reconcileChildren(wip, children) {
	    const current = wip.alternate;
	    if (current !== null) {
	        // 更新，追踪副作用
	        wip.child = reconcileChilFiber(wip, current?.child, children);
	    }
	    else {
	        // 挂载的时候第一次渲染存在大量插入，不追踪副作用
	        wip.child = mountChildFibers(wip, null, children);
	    }
	}

	// 创建实例
	// export const createInstance = (type: string, props: any) => {
	const createInstance = (type) => {
	    // 通过type创建实例
	    const element = document.createElement(type);
	    return element;
	};
	const appendInitialChild = (parent, child) => {
	    parent.appendChild(child);
	};
	// 创建文本节点
	const appendTextInstance = (content) => {
	    return document.createTextNode(content);
	};
	const appendChildToContainer = (parent, child) => {
	    console.log('插入', parent, child);
	    parent.appendChild(child);
	};

	let nextEffect = null;
	const commitMutationEffects = (finishedWork) => {
	    nextEffect = finishedWork;
	    while (nextEffect !== null) {
	        // 向下遍历
	        const child = nextEffect.child;
	        //如果存在子节点，则继续向下遍历
	        if ((nextEffect.subtreeFlags & MutationMask) !== NoFlags &&
	            child !== null) {
	            nextEffect = child;
	        }
	        else {
	            // 可能不存在subtreeFlags或没有子节点,向上遍历
	            up: while (nextEffect !== null) {
	                commitMutationEffectsOnFiber(nextEffect);
	                const sibling = nextEffect.sibling;
	                if (sibling !== null) {
	                    nextEffect = sibling;
	                    break up;
	                }
	                nextEffect = nextEffect.return;
	            }
	        }
	    }
	};
	const commitMutationEffectsOnFiber = (finishedWork) => {
	    const flags = finishedWork.flags;
	    {
	        console.log('commitMutationEffectsOnFiber', finishedWork);
	    }
	    if ((flags & Placement) !== NoFlags) {
	        commitPlacement(finishedWork);
	        finishedWork.flags &= ~Placement; // 标记位清除
	    }
	    // flags update
	    // flags ChildDeletion
	};
	// 插入操作
	const commitPlacement = (finishedWork) => {
	    {
	        console.log('commitPlacement', finishedWork);
	    }
	    // 1.找到父级
	    const hostParent = getHostParent(finishedWork);
	    // 2.
	    if (hostParent !== null) {
	        appendPlacementNodeIntoContainer(finishedWork, hostParent);
	    }
	};
	const getHostParent = (fiber) => {
	    let parent = fiber.return;
	    while (parent) {
	        const parentTag = parent.tag;
	        // 只有hostComponent HostRoot才行
	        if (parentTag === HostComponent) {
	            return parent.stateNode;
	        }
	        if (parentTag === HostRoot) {
	            return parent.stateNode.container;
	        }
	        parent = parent.return;
	    }
	    {
	        console.log('未找到hostParent');
	    }
	    return null;
	};
	function appendPlacementNodeIntoContainer(finishedWork, hostParent) {
	    if (finishedWork.tag === HostComponent || finishedWork.tag === HostText) {
	        appendChildToContainer(hostParent, finishedWork.stateNode);
	        return;
	    }
	    const child = finishedWork.child;
	    if (child !== null) {
	        appendPlacementNodeIntoContainer(child, hostParent);
	        let sibling = child.sibling;
	        while (sibling !== null) {
	            appendPlacementNodeIntoContainer(sibling, hostParent);
	            sibling = sibling.sibling;
	        }
	    }
	}

	/**
	 * 递归中，归阶段
	 */
	const completeWork = (wip) => {
	    const newProps = wip.pendingProps; //当前状态
	    const current = wip.alternate;
	    switch (wip.tag) {
	        // dom原生的这些节点, 如: div, span, p 标签这种
	        case HostComponent:
	            if (current !== null && wip.stateNode) ;
	            else {
	                // 1.构建离屏dom
	                // const instance = createInstance(wip.type, newProps);
	                const instance = createInstance(wip.type);
	                // 2.插入dom树
	                appendAllChildren(instance, wip);
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        // 单纯的文本节点
	        case HostText:
	            if (current !== null && wip.stateNode) ;
	            else {
	                // 1.构建离屏dom
	                const instance = appendTextInstance(newProps.content);
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        case HostRoot:
	            bubbleProperties(wip);
	            return null;
	        default:
	            {
	                console.log('completeWork未定义的类型', wip);
	            }
	            break;
	    }
	    return null;
	};
	// parent节点插入wip
	function appendAllChildren(parent, wip) {
	    let node = wip.child;
	    // 2.可能有兄弟，所以需要遍历
	    while (node !== null) {
	        // 1.往下找child
	        if (node.tag === HostComponent || node.tag === HostText) {
	            // 1. <div><span>子</span></div> 这种只有一个子
	            appendInitialChild(parent, node.stateNode);
	        }
	        else if (node.child !== null) {
	            node.child.return = node;
	            node = node.child;
	            continue;
	        }
	        // 因为是递归，所以如果等于传进来的wip,就结束
	        if (node === wip) {
	            return;
	        }
	        //  2.网上找父
	        while (node.sibling === null) {
	            // 没有兄弟并且没有父级，归结束
	            if (node.return === null || node.return === wip) {
	                return;
	            }
	            // 往上
	            node = node.return;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	    }
	}
	//父节点收集往下子节点的副作用
	function bubbleProperties(wip) {
	    let subtreeFlags = NoFlags;
	    let child = wip.child;
	    while (child !== null) {
	        subtreeFlags |= child.subtreeFlags; //收集儿子子节点的副作用
	        subtreeFlags |= child.flags; //收集儿子的状态
	        child.return = wip;
	        child = child.sibling;
	    }
	    wip.subtreeFlags |= subtreeFlags;
	}

	/*
	 * @Author: fumi 330696896@qq.com
	 * @Date: 2024-08-07 14:39:13
	 * @LastEditors: fumi 330696896@qq.com
	 * @LastEditTime: 2024-08-16 10:11:27
	 * @FilePath: \react\packages\react-reconciler\src\workLoop.ts
	 * @Description: 这是默认设置,请设置`customMade`, 打开koroFileHeader查看配置 进行设置: https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE
	 */
	let workInProgress = null; //当前指向
	function prepareFreshStack(root) {
	    // 当前获取的是root，不能当作workInProgress
	    workInProgress = createWorkInProgress(root.current, {});
	}
	//拿到fiber，找到根
	function markUpdateFromFiberToRoot(fiber) {
	    let node = fiber;
	    let parent = node.return;
	    //如果是普通fiber，会有return  如果是hostFiber，没有return
	    while (parent !== null) {
	        node = parent;
	        parent = node.return;
	    }
	    //如果是hostfiber,则返回
	    if (node.tag === HostRoot) {
	        return node.stateNode;
	    }
	    return null;
	}
	// 调度功能
	const scheduleUpdateOnFiber = (fiber) => {
	    const root = markUpdateFromFiberToRoot(fiber);
	    renderRoot(root);
	};
	/**
	 * renderRoot 触发更新， 常见的是 1. ReactDOM.createRoot().render  2.setState
	 * @param root
	 */
	function renderRoot(root) {
	    // 初始化工作单元
	    prepareFreshStack(root);
	    do {
	        try {
	            workLoop();
	            break;
	        }
	        catch (e) {
	            {
	                console.warn('workLoop error', e);
	            }
	            workInProgress = null;
	        }
	    } while (true);
	    const finishedWork = root.current.alternate;
	    root.finishedWork = finishedWork;
	    // commit阶段
	    commitRoot(root);
	}
	function commitRoot(root) {
	    const finishedWork = root.finishedWork;
	    if (!finishedWork) {
	        return;
	    }
	    {
	        console.log('commitRoot阶段', finishedWork);
	    }
	    // 重置
	    root.finishedWork = null;
	    // 判断是否存在3个阶段需要执行
	    const subtreeHasEffect = (finishedWork.subtreeFlags & MutationMask) !== NoFlags;
	    const rootHasEffect = (finishedWork.flags & MutationMask) !== NoFlags;
	    //commit阶段功能: 1. fiber树的切换 2. 执行Placement对应操作。
	    if (subtreeHasEffect || rootHasEffect) {
	        // 1.beforeMutation
	        commitMutationEffects(finishedWork);
	        // 2.mutation Placement
	        root.current = finishedWork; //1. fiber树的切换
	        // 3.layout
	    }
	    else {
	        root.current = finishedWork;
	    }
	}
	function workLoop() {
	    while (workInProgress !== null) {
	        performUnitOfWork(workInProgress);
	    }
	}
	function performUnitOfWork(fiberNode) {
	    const next = beginWork(fiberNode);
	    fiberNode.memoizedProps = fiberNode.pendingProps;
	    if (next === null) {
	        // 处理到达底层，开始归
	        completeUnitOfWork(fiberNode);
	    }
	    else {
	        // 处理子fiber
	        workInProgress = next;
	    }
	}
	// 遍历兄弟，然后往上
	function completeUnitOfWork(fiberNode) {
	    let node = fiberNode;
	    do {
	        completeWork(node);
	        const sibling = node.sibling;
	        if (sibling !== null) {
	            workInProgress = sibling;
	            return;
	        }
	        node = node.return;
	        workInProgress = node;
	    } while (node !== null);
	}

	function createContainer(container) {
	    // 创建根root
	    const hostRootFiber = new FiberNode(HostRoot, {}, null);
	    const root = new FiberRootNode(container, hostRootFiber);
	    hostRootFiber.updateQueue = createUpdateQueue();
	    return root;
	}
	function updateContainer(element, root) {
	    const hostRootFiber = root.current;
	    // 从根root遍历
	    const update = createUpdate(element);
	    enqueueUpdate(hostRootFiber.updateQueue, update);
	    scheduleUpdateOnFiber(hostRootFiber);
	    return element;
	}

	/*
	 * @Author: fumi 330696896@qq.com
	 * @Date: 2024-08-14 17:36:10
	 * @LastEditors: fumi 330696896@qq.com
	 * @LastEditTime: 2024-08-14 17:51:48
	 * @FilePath: \react\packages\react-dom\src\root.ts
	 * @Description: 这是默认设置,请设置`customMade`, 打开koroFileHeader查看配置 进行设置: https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE
	 */
	// ReactDOM.createRoot(root),render(<App />)
	function createRoot(container) {
	    const root = createContainer(container);
	    return {
	        // render方法接受一个jsx ReactElement
	        render(element) {
	            updateContainer(element, root);
	        }
	    };
	}

	var ReactDOM = /*#__PURE__*/Object.freeze({
		__proto__: null,
		createRoot: createRoot
	});

	return ReactDOM;

}));
